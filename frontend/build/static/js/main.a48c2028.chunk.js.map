{"version":3,"sources":["feathers.js","App.js","serviceWorker.js","index.js"],"names":["rest","feathers","client","configure","axios","authentication","storage","window","localStorage","questions","jobPositions","HideOnScroll","props","children","trigger","useScrollTrigger","target","undefined","Slide","appear","direction","in","App","filterImportant","state","mark5","i","push","setState","important","filterUnimportant","mark1","unimportant","handleChange","ev","name","value","console","log","logValue","position","handleContinue","continue","handleSubmit","service","create","then","r","alert","catch","e","event","this","classes","Fragment","CssBaseline","AppBar","Toolbar","Typography","variant","Container","className","topMargin","Grid","container","centerItem","item","md","xs","Paper","padding","TextField","textField","label","FormControl","formControl","InputLabel","htmlFor","Select","native","onChange","inputProps","id","map","elem","key","Divider","q","markDiv","Rating","handleChangeValue","defaultValue","Chip","margin","multiline","rows","paddingMarginTop","Button","color","onClick","React","Component","withStyles","theme","ratingItem","width","marginTop","textAlign","marginBottom","bottomMargin","topPadding","paddingTop","topPaddingSmall","float","marginLeft","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"6dAIMA,EAAOC,IAASD,KAGhBE,EAASD,MAGfC,EAAOC,UAAUH,EALJ,6BAKeI,MAAMA,MAElCF,EAAOC,UAAUF,IAASI,eAAe,CACvCC,QAASC,OAAOC,gBAGHN,QCkDTO,EAAY,CAChB,eACA,aACA,aAYIC,EAAe,CACnB,iBACA,oBACA,kBACA,yBACA,oCACA,qBACA,SAGF,SAASC,EAAaC,GAAQ,IACpBC,EAAqBD,EAArBC,SAAUN,EAAWK,EAAXL,OAIZO,EAAUC,YAAiB,CAAEC,OAAQT,EAASA,SAAWU,IAE/D,OACE,kBAACC,EAAA,EAAD,CAAOC,QAAQ,EAAOC,UAAU,OAAOC,IAAKP,GACzCD,G,IAKDS,E,YACJ,WAAYV,GAAO,IAAD,8BAChB,4CAAMA,KAWRW,gBAAkB,WACd,IAAMC,EAAQ,EAAKA,MACbC,EAAQ,GACd,IAAI,IAAIC,KAAKF,EACK,IAAbA,EAAME,IACPD,EAAME,KAAKD,GAGf,EAAKE,SAAS,CAACC,UAAUJ,KApBX,EAuBlBK,kBAAoB,WAClB,IAAMN,EAAQ,EAAKA,MACXO,EAAQ,GACd,IAAI,IAAIL,KAAKF,EACK,IAAbA,EAAME,IACPK,EAAMJ,KAAKD,GAGf,EAAKE,SAAS,CAACI,YAAYD,KA/Bb,EAkClBE,aAAe,SAACC,EAAGC,GACjB,EAAKP,SAAL,eAAgBO,EAAMD,EAAGlB,OAAOoB,QAChCC,QAAQC,IAAI,EAAKd,QApCD,EAuClBe,SAAW,SAAAL,GACTG,QAAQC,IAAI,EAAKd,MAAMgB,WAxCP,EA2ClBC,eAAiB,WACf,EAAKlB,kBACL,EAAKO,oBACL,EAAKF,SAAS,CAACc,UAAS,KA9CR,EAiDlBC,aAAe,WACbzC,EAAO0C,QAAQ,YACdC,OAAO,EAAKrB,OACZsB,MAAK,SAAAC,GACJV,QAAQC,IAAIS,GACZC,MAAM,sCAEPC,OAAM,SAAAC,GACLb,QAAQC,IAAIY,GACZF,MAAM,qBAxDR,EAAKxB,MAAM,CACTC,MAAM,GACNI,UAAU,IAJI,E,+EAQMsB,EAAMf,EAAMD,G,kEAClCiB,KAAKxB,SAAL,eAAgBO,EAAMC,I,gFAqDf,IAAD,OACEiB,EAAYD,KAAKxC,MAAjByC,QACR,OACE,kBAAC,IAAMC,SAAP,KACE,kBAACC,EAAA,EAAD,MACA,kBAAC5C,EAAD,KACE,kBAAC6C,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAYC,QAAQ,MAApB,iBAIN,kBAACF,EAAA,EAAD,MACA,kBAACG,EAAA,EAAD,KACE,yBAAKC,UAAWR,EAAQS,YAExB,kBAACC,EAAA,EAAD,CAAMC,WAAS,EAACH,UAAWR,EAAQY,YACjC,kBAACF,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,EAAGC,GAAI,IACtB,kBAACL,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,EAAGC,GAAI,IACpB,kBAACC,EAAA,EAAD,CAAOR,UAAWR,EAAQiB,SACxB,kBAACC,EAAA,EAAD,CAAWV,UAAWR,EAAQmB,UAAWC,MAAM,cAC/C,8BACA,kBAACF,EAAA,EAAD,CAAWV,UAAWR,EAAQmB,UAAWC,MAAM,yBAC/C,8BACE,kBAACC,EAAA,EAAD,CAAab,UAAWR,EAAQsB,aAC9B,kBAACC,EAAA,EAAD,CAAYC,QAAQ,qBAApB,qBACA,kBAACC,EAAA,EAAD,CACEC,QAAM,EACNC,SAAU,SAAA9C,GAAE,OAAI,EAAKD,aAAaC,EAAG,aACrC+C,WAAY,CACV9C,KAAM,WACN+C,GAAI,sBAGN,4BAAQ9C,MAAM,KACb1B,EAAayE,KAAI,SAAAC,GAAI,OACpB,4BAAQC,IAAKD,EAAMhD,MAAOgD,GAAOA,QAIvC,8BACyB,UAAxBhC,KAAK5B,MAAMgB,SAEZ,6BACE,kBAAC+B,EAAA,EAAD,CAAWV,UAAWR,EAAQmB,UAAWC,MAAM,mBAGjD,gCAIN,kBAACV,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,EAAGC,GAAI,KAGxB,kBAACkB,EAAA,EAAD,MAEA,kBAACvB,EAAA,EAAD,CAAMC,WAAS,EAACH,UAAWR,EAAQY,YAC7B,kBAACF,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,EAAGC,GAAI,IACtB,kBAACL,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,EAAGC,GAAI,IACpB,kBAACC,EAAA,EAAD,CAAOR,UAAWR,EAAQY,YACpB,yBAAKJ,UAAWR,EAAQiB,SACtB,gPAOR,kBAACP,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,EAAGC,GAAI,OAK9B,kBAACL,EAAA,EAAD,CAAMC,WAAS,EAACH,UAAWR,EAAQY,YAC/B,kBAACF,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,EAAGC,GAAI,IACpB,kBAACL,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,EAAGC,GAAI,IACpB,kBAACC,EAAA,EAAD,CAAOR,UAAWR,EAAQY,YACnBxD,EAAU0E,KAAI,SAAAI,GAAC,OACd,yBAAK1B,UAAWR,EAAQY,YACtB,yBAAKJ,UAAWR,EAAQmC,SAAUD,GAClC,kBAACE,EAAA,EAAD,CACEtD,KAAMoD,EACNP,SAAU,SAAC7B,EAAOf,GAAR,OAAkB,EAAKsD,kBAAkBvC,EAAMf,EAAMmD,IAC/DI,aAAc,SAK5B,kBAAC5B,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,EAAGC,GAAI,OAIzBhB,KAAK5B,MAAMkB,SAEZ,6BACE,kBAAC4C,EAAA,EAAD,MAEJ,kBAACvB,EAAA,EAAD,CAAMC,WAAS,EAACH,UAAWR,EAAQY,YACjC,kBAACF,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,EAAGC,GAAI,IACtB,kBAACL,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,EAAGC,GAAI,IACpB,kBAACC,EAAA,EAAD,CAAOR,UAAWR,EAAQiB,SACxB,8IAGA,8BACA,+DACA,8BAEClB,KAAK5B,MAAMK,UAAUsD,KAAI,SAAAC,GAAI,OAC5B,kBAACQ,EAAA,EAAD,CAAM/B,UAAWR,EAAQwC,OAAQR,IAAKD,EAAMX,MAAOW,OACrD,8BACA,yBAAKvB,UAAWR,EAAQiB,SACtB,kBAACC,EAAA,EAAD,CACEV,UAAWR,EAAQkB,UACnBS,SAAU,SAAA9C,GAAE,OAAI,EAAKD,aAAaC,EAAI,oBACtCuC,MAAM,UACNd,QAAQ,WACRmC,WAAS,EACTC,KAAK,SAKX,kBAAC1B,EAAA,EAAD,CAAOR,UAAWR,EAAQ2C,kBACxB,4IAGA,8BACA,8DACA,8BAEC5C,KAAK5B,MAAMQ,YAAYmD,KAAI,SAAAC,GAAI,OAC9B,kBAACQ,EAAA,EAAD,CAAM/B,UAAWR,EAAQwC,OAAQR,IAAKD,EAAMX,MAAOW,OACrD,8BACA,yBAAKvB,UAAWR,EAAQiB,SACtB,kBAACC,EAAA,EAAD,CACEV,UAAWR,EAAQkB,UACnBS,SAAU,SAAA9C,GAAE,OAAI,EAAKD,aAAaC,EAAI,sBACtCuC,MAAM,UACNd,QAAQ,WACRmC,WAAS,EACTC,KAAK,SAKX,kBAACE,EAAA,EAAD,CAAQpC,UAAWR,EAAQwC,OAAQlC,QAAQ,YAAYuC,MAAM,UAAUC,QAAS,SAAAjE,GAAE,OAAI,EAAKS,iBAA3F,WAGA,kBAACoB,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,EAAGC,GAAI,IACxB,kBAACL,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,EAAGC,GAAI,MAItB,yBAAKP,UAAWR,EAAQY,YACvB,kBAACgC,EAAA,EAAD,CAAQE,QAAS,SAAAjE,GAAE,OAAI,EAAKO,kBAAkBkB,QAAQ,YAAYuC,MAAM,WAAxE,mB,GA1NKE,IAAMC,WAqOTC,eA1TA,SAAAC,GAAK,MAAK,CACvBC,WAAW,CACTC,MAAM,KAER3C,UAAU,CACR4C,UAAU,IAEZzC,WAAW,CACT0C,UAAU,SACVD,UAAU,EACVE,aAAa,GAEfjC,YAAY,CACV8B,MAAM,KAERI,aAAa,CACXD,aAAa,IAEfE,WAAW,CACTC,WAAW,IAEbC,gBAAgB,CACdD,WAAW,GAEbzC,QAAQ,CACNA,QAAQ,IAEVC,UAAU,CACRkC,MAAM,OAERZ,OAAO,CACLA,OAAO,GAETG,iBAAiB,CACf1B,QAAQ,GACRoC,UAAU,IAEZlB,QAAQ,CACNyB,MAAM,OACNP,UAAU,EACVQ,WAAW,GACXT,MAAM,QAiRKH,CAAmBhF,GClUd6F,QACW,cAA7B5G,OAAO6G,SAASC,UAEe,UAA7B9G,OAAO6G,SAASC,UAEhB9G,OAAO6G,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM/E,MAAK,SAAAgF,GACjCA,EAAaC,kB","file":"static/js/main.a48c2028.chunk.js","sourcesContent":["//import io from 'socket.io-client';\r\nimport feathers from '@feathersjs/client';\r\nimport axios from 'axios'\r\n\r\nconst rest = feathers.rest;\r\nconst host = \"http://120.79.52.227:3030\"\r\n\r\nconst client = feathers();\r\n\r\n// client.configure(feathers.socketio(socket));\r\nclient.configure(rest(host).axios(axios))\r\n\r\nclient.configure(feathers.authentication({\r\n  storage: window.localStorage\r\n}));\r\n\r\nexport default client;","import React from 'react';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport useScrollTrigger from '@material-ui/core/useScrollTrigger';\nimport Container from '@material-ui/core/Container';\nimport Slide from '@material-ui/core/Slide';\nimport { withStyles } from '@material-ui/core/styles';\nimport Grid from '@material-ui/core/Grid'\nimport TextField from '@material-ui/core/TextField'\nimport Divider from '@material-ui/core/Divider'\nimport InputLabel from '@material-ui/core/InputLabel';\nimport Select from '@material-ui/core/Select'\nimport FormControl from '@material-ui/core/FormControl';\nimport Chip from '@material-ui/core/Chip';\nimport Paper from '@material-ui/core/Paper'\nimport Rating from '@material-ui/lab/Rating';\nimport Button from '@material-ui/core/Button'\nimport client from './feathers'\nconst styles = theme => ({\n  ratingItem:{\n    width:150\n  },\n  topMargin:{\n    marginTop:50\n  },\n  centerItem:{\n    textAlign:'center',\n    marginTop:5,\n    marginBottom:5\n  },\n  formControl:{\n    width:200,\n  },\n  bottomMargin:{\n    marginBottom:30\n  },\n  topPadding:{\n    paddingTop:30\n  },\n  topPaddingSmall:{\n    paddingTop:5\n  },\n  padding:{\n    padding:20 \n  },\n  TextField:{\n    width:'80%',\n  },\n  margin:{\n    margin:3\n  },\n  paddingMarginTop:{\n    padding:20,\n    marginTop:20\n  },\n  markDiv:{\n    float:'left',\n    marginTop:5,\n    marginLeft:50,\n    width:100\n  }\n\n});\n\nconst questions = [\n  \"Raw Pointers\",\n  \"Raw Arrays\",\n  \"C Strings\"\n]\n\nconst marks = [\n  {value:0, label:\"0\"},\n  {value:1, label:\"1\"},\n  {value:2, label:\"2\"},\n  {value:3, label:\"3\"},\n  {value:4, label:\"4\"},\n  {value:5, label:\"5\"}\n]\n\nconst jobPositions = [\n  'Web Programmer',\n  'System Programmer',\n  'Game Programmer',\n  'Application Programmer',\n  'Artificial Intelligence Developer',\n  'Database Developer',\n  'Other'\n]\n\nfunction HideOnScroll(props) {\n  const { children, window } = props;\n  // Note that you normally won't need to set the window ref as useScrollTrigger\n  // will default to window.\n  // This is only being set here because the demo is in an iframe.\n  const trigger = useScrollTrigger({ target: window ? window() : undefined });\n\n  return (\n    <Slide appear={false} direction=\"down\" in={!trigger}>\n      {children}\n    </Slide>\n  );\n}\n\nclass App extends React.Component {\n  constructor(props){\n    super(props)\n    this.state={\n      mark5:[],\n      important:[]\n    }\n  }\n\n  async handleChangeValue(event,value,name){\n    this.setState({[name]:value})    \n  }\n\n  filterImportant = () => {\n      const state = this.state\n      const mark5 = []\n      for(var i in state){\n        if(state[i] === 5){\n          mark5.push(i)\n        }\n      }\n      this.setState({important:mark5})\n  }\n\n  filterUnimportant = () => {\n    const state = this.state\n      const mark1 = []\n      for(var i in state){\n        if(state[i] === 1){\n          mark1.push(i)\n        }\n      }\n      this.setState({unimportant:mark1})\n  }\n\n  handleChange = (ev,name) => {\n    this.setState({[name]:ev.target.value})\n    console.log(this.state)\n  }\n\n  logValue = ev => {\n    console.log(this.state.position)\n  }\n  \n  handleContinue = () => {\n    this.filterImportant()\n    this.filterUnimportant()\n    this.setState({continue:true})\n  }\n\n  handleSubmit = () => {\n    client.service('feedback')\n    .create(this.state)\n    .then(r => {\n      console.log(r)\n      alert('Your Response Has Been Recorded')\n    })\n    .catch(e => {\n      console.log(e)\n      alert('Error Occured')\n    })\n  }\n\n  render(){\n    const { classes } = this.props;\n    return (\n      <React.Fragment>\n        <CssBaseline />\n        <HideOnScroll >\n          <AppBar>\n            <Toolbar>\n              <Typography variant=\"h6\">C++ Survey</Typography>\n            </Toolbar>\n          </AppBar>\n        </HideOnScroll>\n        <Toolbar />\n        <Container>\n          <div className={classes.topMargin}/>\n\n          <Grid container className={classes.centerItem}>\n            <Grid item md={3} xs={1}/>\n            <Grid item md={6} xs={10} >\n              <Paper className={classes.padding}>\n                <TextField className={classes.textField} label=\"Your Name\"/>\n                <div/>\n                <TextField className={classes.textField} label=\"Organization/Company\"/>\n                <div/>\n                  <FormControl className={classes.formControl}>\n                    <InputLabel htmlFor=\"position-selecter\">Your Job Position</InputLabel>\n                    <Select\n                      native\n                      onChange={ev => this.handleChange(ev,'position')}\n                      inputProps={{\n                        name: 'position',\n                        id: 'position-selecter',\n                      }}\n                    > \n                      <option value=''></option>\n                      {jobPositions.map(elem => (\n                        <option key={elem} value={elem}>{elem}</option>\n                      ))}\n                    </Select>\n                  </FormControl>\n                  <div/>\n                  {this.state.position === 'Other'\n                  ?\n                  <div>\n                    <TextField className={classes.textField} label=\"Your Position\"/>                 \n                  </div>\n                  :\n                  <div/>}\n              </Paper>\n              \n            </Grid>\n            <Grid item md={3} xs={1}/>\n          </Grid>\n\n          <Divider/>\n          \n          <Grid container className={classes.centerItem}>\n                <Grid item md={3} xs={1}/>\n                <Grid item md={6} xs={10} >\n                  <Paper className={classes.centerItem}>\n                        <div className={classes.padding }>\n                          <p>Please mark the level of importance that you think for\n                            the following topics. 5 starts means most important, 1 start\n                            means the least important. You can skip topics if you don't know/not \n                            sure about the topics.\n                          </p>\n                        </div>\n                  </Paper>\n                  <Grid item md={3} xs={10}/>\n                </Grid>\n            </Grid>\n          \n           \n          <Grid container className={classes.centerItem}>\n              <Grid item md={3} xs={1}/>\n                <Grid item md={6} xs={10}>\n                  <Paper className={classes.centerItem}>\n                        {questions.map(q => (\n                          <div className={classes.centerItem}>\n                            <div className={classes.markDiv}>{q}</div>\n                            <Rating\n                              name={q}\n                              onChange={(event, value) => this.handleChangeValue(event,value,q)}\n                              defaultValue={0}\n                            />\n                          </div>\n                        ))}\n                  </Paper>\n                <Grid item md={3} xs={10}/>\n              </Grid>\n          </Grid>\n        \n            {this.state.continue\n            ?\n            <div>\n              <Divider/>\n          \n          <Grid container className={classes.centerItem}>\n            <Grid item md={3} xs={1}/>\n            <Grid item md={6} xs={10}>\n              <Paper className={classes.padding}>\n                <p>For the topics that you gave 5 stars, \n                  could you briefly explain the reason \n                  why you think they are so important?</p>\n                <div/>\n                <p>The topics you gave 5 stars are:</p>\n                <div/>\n                \n                {this.state.important.map(elem => (\n                  <Chip className={classes.margin} key={elem} label={elem}/>))}\n                <div/>\n                <div className={classes.padding}>\n                  <TextField \n                    className={classes.TextField}\n                    onChange={ev => this.handleChange(ev, 'importantReason')} \n                    label=\"explain\"\n                    variant=\"outlined\"\n                    multiline\n                    rows='10'\n                  />\n                </div>\n              </Paper>\n\n              <Paper className={classes.paddingMarginTop}>\n                <p>For the topics that you gave 1 star, \n                  could you briefly explain the reason \n                  why you think they are unimportant?</p>\n                <div/>\n                <p>The topics you gave 1 star are:</p>\n                <div/>\n                \n                {this.state.unimportant.map(elem => (\n                  <Chip className={classes.margin} key={elem} label={elem}/>))}\n                <div/>\n                <div className={classes.padding}>\n                  <TextField \n                    className={classes.TextField}\n                    onChange={ev => this.handleChange(ev, 'unimportantReason')} \n                    label=\"explain\"\n                    variant=\"outlined\"\n                    multiline\n                    rows='10'\n                  />\n                </div>\n              </Paper>\n\n              <Button className={classes.margin} variant='contained' color='primary' onClick={ev => this.handleSubmit()}>Submit</Button>\n              \n                </Grid>\n              <Grid item md={6} xs={1}/>\n            <Grid item md={3} xs={1}/>\n          </Grid>\n            </div>\n            :\n            <div className={classes.centerItem}>\n             <Button onClick={ev => this.handleContinue()} variant='contained' color='primary'>Continue</Button>\n            </div>\n            }\n\n        </Container>\n      </React.Fragment>\n    );\n  }\n\n}\n\nexport default withStyles(styles)(App);","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}